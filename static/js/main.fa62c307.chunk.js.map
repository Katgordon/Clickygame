{"version":3,"sources":["logo.svg","components/Title/Title.js","components/Wrapper/Wrapper.js","components/AnimalCard/AnimalCard.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","className","this","props","children","Component","Wrapper","AnimalCard","onClick","clicked","id","alt","name","src","image","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","animals","score","alert","console","log","setState","shuffle","array","i","length","j","Math","floor","random","_ref","_this2","components_Title_Title","components_Wrapper_Wrapper","map","card","components_AnimalCard_AnimalCard","key","bind","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fa62c307.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './Title.css';\n\nclass Title extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">{this.props.children}</h1>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from 'react';\nimport './Wrapper.css';\n\nconst Wrapper = props => (\n  <div className=\"wrapper\">\n    <div className=\"wrapper-container\">{props.children}</div>\n  </div>\n);\n\nexport default Wrapper;\n","import React from 'react';\nimport './AnimalCard.css';\n\nconst AnimalCard = props => (\n  <div className=\"card\" onClick={() => props.clicked(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} className=\"responsive-img\" src={props.image} />\n    </div>\n  </div>\n);\n\nexport default AnimalCard;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport animals from './animals.json';\n\nimport Title from './components/Title/Title';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport AnimalCard from './components/AnimalCard/AnimalCard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      animals\n    };\n  }\n\n  clicked = id => {\n    let { animals, score } = this.state;\n\n    if (!animals[id].clicked) {\n      console.log(animals[id].clicked);\n      animals[id].clicked = true;\n      score++;\n    } else {\n      score = 0;\n      animals[id].clicked = false;\n      alert('Try again!');\n    }\n\n    this.setState({\n      animals,\n      score\n    });\n  };\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  render() {\n    // console.log(this.state.animals);\n    return (\n      <div>\n        <Title>Click on the anime picture, but don't click twice!!</Title>\n        <div>\n          <h4 className=\"score\">Score: {this.state.score}</h4>\n        </div>\n        <Wrapper>\n          {this.shuffle(\n            this.state.animals.map(card => (\n              <AnimalCard key={card.id} id={card.id} image={card.image} clicked={this.clicked.bind(this, card.id)} />\n            ))\n          )}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}